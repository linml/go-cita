// Code generated by protoc-gen-go. DO NOT EDIT.
// source: communication.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InnerMessage struct {
	// Types that are valid to be assigned to Content:
	//	*InnerMessage_RawBytes
	//	*InnerMessage_Request
	//	*InnerMessage_Response
	//	*InnerMessage_SyncRequest
	//	*InnerMessage_SyncResponse
	//	*InnerMessage_Status
	//	*InnerMessage_RichStatus
	//	*InnerMessage_SignedProposal
	//	*InnerMessage_Block
	//	*InnerMessage_BlockWithProof
	//	*InnerMessage_BlockHeader
	//	*InnerMessage_BlockTxs
	//	*InnerMessage_BlockTxHashes
	//	*InnerMessage_BlockTxHashesReq
	//	*InnerMessage_VerifyTxReq
	//	*InnerMessage_VerifyTxResp
	//	*InnerMessage_VerifyBlockReq
	//	*InnerMessage_VerifyBlockResp
	//	*InnerMessage_ExecutedResult
	//	*InnerMessage_SnapshotReq
	//	*InnerMessage_SnapshotResp
	//	*InnerMessage_Miscellaneous
	//	*InnerMessage_MiscellaneousReq
	Content              isInnerMessage_Content `protobuf_oneof:"content"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *InnerMessage) Reset()         { *m = InnerMessage{} }
func (m *InnerMessage) String() string { return proto.CompactTextString(m) }
func (*InnerMessage) ProtoMessage()    {}
func (*InnerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_communication_bfeadd1de6003654, []int{0}
}
func (m *InnerMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InnerMessage.Unmarshal(m, b)
}
func (m *InnerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InnerMessage.Marshal(b, m, deterministic)
}
func (dst *InnerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InnerMessage.Merge(dst, src)
}
func (m *InnerMessage) XXX_Size() int {
	return xxx_messageInfo_InnerMessage.Size(m)
}
func (m *InnerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_InnerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_InnerMessage proto.InternalMessageInfo

type isInnerMessage_Content interface {
	isInnerMessage_Content()
}

type InnerMessage_RawBytes struct {
	RawBytes []byte `protobuf:"bytes,1,opt,name=RawBytes,proto3,oneof"`
}
type InnerMessage_Request struct {
	Request *Request `protobuf:"bytes,2,opt,name=Request,oneof"`
}
type InnerMessage_Response struct {
	Response *Response `protobuf:"bytes,3,opt,name=Response,oneof"`
}
type InnerMessage_SyncRequest struct {
	SyncRequest *SyncRequest `protobuf:"bytes,4,opt,name=SyncRequest,oneof"`
}
type InnerMessage_SyncResponse struct {
	SyncResponse *SyncResponse `protobuf:"bytes,5,opt,name=SyncResponse,oneof"`
}
type InnerMessage_Status struct {
	Status *Status `protobuf:"bytes,6,opt,name=Status,oneof"`
}
type InnerMessage_RichStatus struct {
	RichStatus *RichStatus `protobuf:"bytes,7,opt,name=RichStatus,oneof"`
}
type InnerMessage_SignedProposal struct {
	SignedProposal *SignedProposal `protobuf:"bytes,8,opt,name=SignedProposal,oneof"`
}
type InnerMessage_Block struct {
	Block *Block `protobuf:"bytes,9,opt,name=Block,oneof"`
}
type InnerMessage_BlockWithProof struct {
	BlockWithProof *BlockWithProof `protobuf:"bytes,10,opt,name=BlockWithProof,oneof"`
}
type InnerMessage_BlockHeader struct {
	BlockHeader *BlockHeader `protobuf:"bytes,11,opt,name=BlockHeader,oneof"`
}
type InnerMessage_BlockTxs struct {
	BlockTxs *BlockTxs `protobuf:"bytes,12,opt,name=BlockTxs,oneof"`
}
type InnerMessage_BlockTxHashes struct {
	BlockTxHashes *BlockTxHashes `protobuf:"bytes,13,opt,name=BlockTxHashes,oneof"`
}
type InnerMessage_BlockTxHashesReq struct {
	BlockTxHashesReq *BlockTxHashesReq `protobuf:"bytes,14,opt,name=BlockTxHashesReq,oneof"`
}
type InnerMessage_VerifyTxReq struct {
	VerifyTxReq *VerifyTxReq `protobuf:"bytes,15,opt,name=VerifyTxReq,oneof"`
}
type InnerMessage_VerifyTxResp struct {
	VerifyTxResp *VerifyTxResp `protobuf:"bytes,16,opt,name=VerifyTxResp,oneof"`
}
type InnerMessage_VerifyBlockReq struct {
	VerifyBlockReq *VerifyBlockReq `protobuf:"bytes,17,opt,name=VerifyBlockReq,oneof"`
}
type InnerMessage_VerifyBlockResp struct {
	VerifyBlockResp *VerifyBlockResp `protobuf:"bytes,18,opt,name=VerifyBlockResp,oneof"`
}
type InnerMessage_ExecutedResult struct {
	ExecutedResult *ExecutedResult `protobuf:"bytes,19,opt,name=ExecutedResult,oneof"`
}
type InnerMessage_SnapshotReq struct {
	SnapshotReq *SnapshotReq `protobuf:"bytes,20,opt,name=SnapshotReq,oneof"`
}
type InnerMessage_SnapshotResp struct {
	SnapshotResp *SnapshotResp `protobuf:"bytes,21,opt,name=SnapshotResp,oneof"`
}
type InnerMessage_Miscellaneous struct {
	Miscellaneous *Miscellaneous `protobuf:"bytes,22,opt,name=Miscellaneous,oneof"`
}
type InnerMessage_MiscellaneousReq struct {
	MiscellaneousReq *MiscellaneousReq `protobuf:"bytes,23,opt,name=MiscellaneousReq,oneof"`
}

func (*InnerMessage_RawBytes) isInnerMessage_Content()         {}
func (*InnerMessage_Request) isInnerMessage_Content()          {}
func (*InnerMessage_Response) isInnerMessage_Content()         {}
func (*InnerMessage_SyncRequest) isInnerMessage_Content()      {}
func (*InnerMessage_SyncResponse) isInnerMessage_Content()     {}
func (*InnerMessage_Status) isInnerMessage_Content()           {}
func (*InnerMessage_RichStatus) isInnerMessage_Content()       {}
func (*InnerMessage_SignedProposal) isInnerMessage_Content()   {}
func (*InnerMessage_Block) isInnerMessage_Content()            {}
func (*InnerMessage_BlockWithProof) isInnerMessage_Content()   {}
func (*InnerMessage_BlockHeader) isInnerMessage_Content()      {}
func (*InnerMessage_BlockTxs) isInnerMessage_Content()         {}
func (*InnerMessage_BlockTxHashes) isInnerMessage_Content()    {}
func (*InnerMessage_BlockTxHashesReq) isInnerMessage_Content() {}
func (*InnerMessage_VerifyTxReq) isInnerMessage_Content()      {}
func (*InnerMessage_VerifyTxResp) isInnerMessage_Content()     {}
func (*InnerMessage_VerifyBlockReq) isInnerMessage_Content()   {}
func (*InnerMessage_VerifyBlockResp) isInnerMessage_Content()  {}
func (*InnerMessage_ExecutedResult) isInnerMessage_Content()   {}
func (*InnerMessage_SnapshotReq) isInnerMessage_Content()      {}
func (*InnerMessage_SnapshotResp) isInnerMessage_Content()     {}
func (*InnerMessage_Miscellaneous) isInnerMessage_Content()    {}
func (*InnerMessage_MiscellaneousReq) isInnerMessage_Content() {}

func (m *InnerMessage) GetContent() isInnerMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *InnerMessage) GetRawBytes() []byte {
	if x, ok := m.GetContent().(*InnerMessage_RawBytes); ok {
		return x.RawBytes
	}
	return nil
}

func (m *InnerMessage) GetRequest() *Request {
	if x, ok := m.GetContent().(*InnerMessage_Request); ok {
		return x.Request
	}
	return nil
}

func (m *InnerMessage) GetResponse() *Response {
	if x, ok := m.GetContent().(*InnerMessage_Response); ok {
		return x.Response
	}
	return nil
}

func (m *InnerMessage) GetSyncRequest() *SyncRequest {
	if x, ok := m.GetContent().(*InnerMessage_SyncRequest); ok {
		return x.SyncRequest
	}
	return nil
}

func (m *InnerMessage) GetSyncResponse() *SyncResponse {
	if x, ok := m.GetContent().(*InnerMessage_SyncResponse); ok {
		return x.SyncResponse
	}
	return nil
}

func (m *InnerMessage) GetStatus() *Status {
	if x, ok := m.GetContent().(*InnerMessage_Status); ok {
		return x.Status
	}
	return nil
}

func (m *InnerMessage) GetRichStatus() *RichStatus {
	if x, ok := m.GetContent().(*InnerMessage_RichStatus); ok {
		return x.RichStatus
	}
	return nil
}

func (m *InnerMessage) GetSignedProposal() *SignedProposal {
	if x, ok := m.GetContent().(*InnerMessage_SignedProposal); ok {
		return x.SignedProposal
	}
	return nil
}

func (m *InnerMessage) GetBlock() *Block {
	if x, ok := m.GetContent().(*InnerMessage_Block); ok {
		return x.Block
	}
	return nil
}

func (m *InnerMessage) GetBlockWithProof() *BlockWithProof {
	if x, ok := m.GetContent().(*InnerMessage_BlockWithProof); ok {
		return x.BlockWithProof
	}
	return nil
}

func (m *InnerMessage) GetBlockHeader() *BlockHeader {
	if x, ok := m.GetContent().(*InnerMessage_BlockHeader); ok {
		return x.BlockHeader
	}
	return nil
}

func (m *InnerMessage) GetBlockTxs() *BlockTxs {
	if x, ok := m.GetContent().(*InnerMessage_BlockTxs); ok {
		return x.BlockTxs
	}
	return nil
}

func (m *InnerMessage) GetBlockTxHashes() *BlockTxHashes {
	if x, ok := m.GetContent().(*InnerMessage_BlockTxHashes); ok {
		return x.BlockTxHashes
	}
	return nil
}

func (m *InnerMessage) GetBlockTxHashesReq() *BlockTxHashesReq {
	if x, ok := m.GetContent().(*InnerMessage_BlockTxHashesReq); ok {
		return x.BlockTxHashesReq
	}
	return nil
}

func (m *InnerMessage) GetVerifyTxReq() *VerifyTxReq {
	if x, ok := m.GetContent().(*InnerMessage_VerifyTxReq); ok {
		return x.VerifyTxReq
	}
	return nil
}

func (m *InnerMessage) GetVerifyTxResp() *VerifyTxResp {
	if x, ok := m.GetContent().(*InnerMessage_VerifyTxResp); ok {
		return x.VerifyTxResp
	}
	return nil
}

func (m *InnerMessage) GetVerifyBlockReq() *VerifyBlockReq {
	if x, ok := m.GetContent().(*InnerMessage_VerifyBlockReq); ok {
		return x.VerifyBlockReq
	}
	return nil
}

func (m *InnerMessage) GetVerifyBlockResp() *VerifyBlockResp {
	if x, ok := m.GetContent().(*InnerMessage_VerifyBlockResp); ok {
		return x.VerifyBlockResp
	}
	return nil
}

func (m *InnerMessage) GetExecutedResult() *ExecutedResult {
	if x, ok := m.GetContent().(*InnerMessage_ExecutedResult); ok {
		return x.ExecutedResult
	}
	return nil
}

func (m *InnerMessage) GetSnapshotReq() *SnapshotReq {
	if x, ok := m.GetContent().(*InnerMessage_SnapshotReq); ok {
		return x.SnapshotReq
	}
	return nil
}

func (m *InnerMessage) GetSnapshotResp() *SnapshotResp {
	if x, ok := m.GetContent().(*InnerMessage_SnapshotResp); ok {
		return x.SnapshotResp
	}
	return nil
}

func (m *InnerMessage) GetMiscellaneous() *Miscellaneous {
	if x, ok := m.GetContent().(*InnerMessage_Miscellaneous); ok {
		return x.Miscellaneous
	}
	return nil
}

func (m *InnerMessage) GetMiscellaneousReq() *MiscellaneousReq {
	if x, ok := m.GetContent().(*InnerMessage_MiscellaneousReq); ok {
		return x.MiscellaneousReq
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InnerMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InnerMessage_OneofMarshaler, _InnerMessage_OneofUnmarshaler, _InnerMessage_OneofSizer, []interface{}{
		(*InnerMessage_RawBytes)(nil),
		(*InnerMessage_Request)(nil),
		(*InnerMessage_Response)(nil),
		(*InnerMessage_SyncRequest)(nil),
		(*InnerMessage_SyncResponse)(nil),
		(*InnerMessage_Status)(nil),
		(*InnerMessage_RichStatus)(nil),
		(*InnerMessage_SignedProposal)(nil),
		(*InnerMessage_Block)(nil),
		(*InnerMessage_BlockWithProof)(nil),
		(*InnerMessage_BlockHeader)(nil),
		(*InnerMessage_BlockTxs)(nil),
		(*InnerMessage_BlockTxHashes)(nil),
		(*InnerMessage_BlockTxHashesReq)(nil),
		(*InnerMessage_VerifyTxReq)(nil),
		(*InnerMessage_VerifyTxResp)(nil),
		(*InnerMessage_VerifyBlockReq)(nil),
		(*InnerMessage_VerifyBlockResp)(nil),
		(*InnerMessage_ExecutedResult)(nil),
		(*InnerMessage_SnapshotReq)(nil),
		(*InnerMessage_SnapshotResp)(nil),
		(*InnerMessage_Miscellaneous)(nil),
		(*InnerMessage_MiscellaneousReq)(nil),
	}
}

func _InnerMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InnerMessage)
	// content
	switch x := m.Content.(type) {
	case *InnerMessage_RawBytes:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.RawBytes)
	case *InnerMessage_Request:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Request); err != nil {
			return err
		}
	case *InnerMessage_Response:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Response); err != nil {
			return err
		}
	case *InnerMessage_SyncRequest:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SyncRequest); err != nil {
			return err
		}
	case *InnerMessage_SyncResponse:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SyncResponse); err != nil {
			return err
		}
	case *InnerMessage_Status:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case *InnerMessage_RichStatus:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RichStatus); err != nil {
			return err
		}
	case *InnerMessage_SignedProposal:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SignedProposal); err != nil {
			return err
		}
	case *InnerMessage_Block:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *InnerMessage_BlockWithProof:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockWithProof); err != nil {
			return err
		}
	case *InnerMessage_BlockHeader:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockHeader); err != nil {
			return err
		}
	case *InnerMessage_BlockTxs:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockTxs); err != nil {
			return err
		}
	case *InnerMessage_BlockTxHashes:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockTxHashes); err != nil {
			return err
		}
	case *InnerMessage_BlockTxHashesReq:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockTxHashesReq); err != nil {
			return err
		}
	case *InnerMessage_VerifyTxReq:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VerifyTxReq); err != nil {
			return err
		}
	case *InnerMessage_VerifyTxResp:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VerifyTxResp); err != nil {
			return err
		}
	case *InnerMessage_VerifyBlockReq:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VerifyBlockReq); err != nil {
			return err
		}
	case *InnerMessage_VerifyBlockResp:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VerifyBlockResp); err != nil {
			return err
		}
	case *InnerMessage_ExecutedResult:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExecutedResult); err != nil {
			return err
		}
	case *InnerMessage_SnapshotReq:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SnapshotReq); err != nil {
			return err
		}
	case *InnerMessage_SnapshotResp:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SnapshotResp); err != nil {
			return err
		}
	case *InnerMessage_Miscellaneous:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Miscellaneous); err != nil {
			return err
		}
	case *InnerMessage_MiscellaneousReq:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MiscellaneousReq); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InnerMessage.Content has unexpected type %T", x)
	}
	return nil
}

func _InnerMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InnerMessage)
	switch tag {
	case 1: // content.RawBytes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Content = &InnerMessage_RawBytes{x}
		return true, err
	case 2: // content.Request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Request)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_Request{msg}
		return true, err
	case 3: // content.Response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Response)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_Response{msg}
		return true, err
	case 4: // content.SyncRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SyncRequest)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_SyncRequest{msg}
		return true, err
	case 5: // content.SyncResponse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SyncResponse)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_SyncResponse{msg}
		return true, err
	case 6: // content.Status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Status)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_Status{msg}
		return true, err
	case 7: // content.RichStatus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RichStatus)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_RichStatus{msg}
		return true, err
	case 8: // content.SignedProposal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SignedProposal)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_SignedProposal{msg}
		return true, err
	case 9: // content.Block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_Block{msg}
		return true, err
	case 10: // content.BlockWithProof
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockWithProof)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_BlockWithProof{msg}
		return true, err
	case 11: // content.BlockHeader
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockHeader)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_BlockHeader{msg}
		return true, err
	case 12: // content.BlockTxs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockTxs)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_BlockTxs{msg}
		return true, err
	case 13: // content.BlockTxHashes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockTxHashes)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_BlockTxHashes{msg}
		return true, err
	case 14: // content.BlockTxHashesReq
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockTxHashesReq)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_BlockTxHashesReq{msg}
		return true, err
	case 15: // content.VerifyTxReq
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VerifyTxReq)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_VerifyTxReq{msg}
		return true, err
	case 16: // content.VerifyTxResp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VerifyTxResp)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_VerifyTxResp{msg}
		return true, err
	case 17: // content.VerifyBlockReq
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VerifyBlockReq)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_VerifyBlockReq{msg}
		return true, err
	case 18: // content.VerifyBlockResp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VerifyBlockResp)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_VerifyBlockResp{msg}
		return true, err
	case 19: // content.ExecutedResult
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecutedResult)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_ExecutedResult{msg}
		return true, err
	case 20: // content.SnapshotReq
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnapshotReq)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_SnapshotReq{msg}
		return true, err
	case 21: // content.SnapshotResp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnapshotResp)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_SnapshotResp{msg}
		return true, err
	case 22: // content.Miscellaneous
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Miscellaneous)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_Miscellaneous{msg}
		return true, err
	case 23: // content.MiscellaneousReq
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MiscellaneousReq)
		err := b.DecodeMessage(msg)
		m.Content = &InnerMessage_MiscellaneousReq{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InnerMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InnerMessage)
	// content
	switch x := m.Content.(type) {
	case *InnerMessage_RawBytes:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.RawBytes)))
		n += len(x.RawBytes)
	case *InnerMessage_Request:
		s := proto.Size(x.Request)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_Response:
		s := proto.Size(x.Response)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_SyncRequest:
		s := proto.Size(x.SyncRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_SyncResponse:
		s := proto.Size(x.SyncResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_Status:
		s := proto.Size(x.Status)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_RichStatus:
		s := proto.Size(x.RichStatus)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_SignedProposal:
		s := proto.Size(x.SignedProposal)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_Block:
		s := proto.Size(x.Block)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_BlockWithProof:
		s := proto.Size(x.BlockWithProof)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_BlockHeader:
		s := proto.Size(x.BlockHeader)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_BlockTxs:
		s := proto.Size(x.BlockTxs)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_BlockTxHashes:
		s := proto.Size(x.BlockTxHashes)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_BlockTxHashesReq:
		s := proto.Size(x.BlockTxHashesReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_VerifyTxReq:
		s := proto.Size(x.VerifyTxReq)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_VerifyTxResp:
		s := proto.Size(x.VerifyTxResp)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_VerifyBlockReq:
		s := proto.Size(x.VerifyBlockReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_VerifyBlockResp:
		s := proto.Size(x.VerifyBlockResp)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_ExecutedResult:
		s := proto.Size(x.ExecutedResult)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_SnapshotReq:
		s := proto.Size(x.SnapshotReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_SnapshotResp:
		s := proto.Size(x.SnapshotResp)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_Miscellaneous:
		s := proto.Size(x.Miscellaneous)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InnerMessage_MiscellaneousReq:
		s := proto.Size(x.MiscellaneousReq)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*InnerMessage)(nil), "InnerMessage")
}

func init() { proto.RegisterFile("communication.proto", fileDescriptor_communication_bfeadd1de6003654) }

var fileDescriptor_communication_bfeadd1de6003654 = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x94, 0x6d, 0x6b, 0x14, 0x31,
	0x10, 0xc7, 0xb7, 0x6a, 0xef, 0x21, 0xf7, 0xd8, 0xd4, 0x87, 0x20, 0x22, 0x55, 0x04, 0xfb, 0xc6,
	0x20, 0x16, 0x04, 0x41, 0x10, 0x0a, 0x42, 0x7c, 0x51, 0x28, 0xb9, 0xa2, 0xaf, 0xb7, 0x7b, 0x69,
	0x77, 0xf1, 0x9a, 0x6c, 0x77, 0xb2, 0x78, 0xf7, 0x7d, 0xfc, 0xa0, 0x32, 0xd9, 0xa4, 0x97, 0xac,
	0xef, 0xf2, 0xff, 0xe5, 0x3f, 0x93, 0x64, 0x66, 0x67, 0xc9, 0x71, 0x61, 0xee, 0xee, 0x5a, 0x5d,
	0x15, 0xb9, 0xad, 0x8c, 0xe6, 0x75, 0x63, 0xac, 0x79, 0x39, 0x6b, 0xd4, 0x7d, 0xab, 0xc0, 0x7a,
	0x39, 0x6f, 0x14, 0xd4, 0x46, 0x83, 0xf2, 0x9a, 0xc0, 0x4e, 0x17, 0x7e, 0xbd, 0xbc, 0xde, 0x98,
	0xe2, 0x77, 0x51, 0xe6, 0x55, 0x08, 0x5e, 0x14, 0x68, 0xd5, 0xd0, 0x42, 0xb0, 0xe7, 0xad, 0x2d,
	0x43, 0x2a, 0xb5, 0x55, 0x45, 0x6b, 0x4d, 0x13, 0x34, 0xe8, 0xbc, 0x86, 0xd2, 0xf8, 0xa3, 0xde,
	0xfe, 0x1d, 0x93, 0xe9, 0x0f, 0xad, 0x55, 0x73, 0xa1, 0x00, 0xf2, 0x5b, 0x45, 0x5f, 0x91, 0x91,
	0xcc, 0xff, 0x9c, 0xef, 0xac, 0x02, 0x76, 0x70, 0x72, 0x70, 0x3a, 0x15, 0x99, 0x7c, 0x20, 0xf4,
	0x1d, 0x19, 0xca, 0xee, 0xaa, 0xec, 0xd1, 0xc9, 0xc1, 0xe9, 0xe4, 0xd3, 0x88, 0x7b, 0x2d, 0x32,
	0x19, 0xb6, 0xe8, 0x7b, 0x32, 0x92, 0xfe, 0x05, 0xec, 0xb1, 0xb3, 0x8d, 0x79, 0x00, 0x2e, 0x9d,
	0x5f, 0xd3, 0x8f, 0x64, 0xb2, 0xda, 0xe9, 0x22, 0xa4, 0x7c, 0xe2, 0xbc, 0x53, 0x1e, 0x31, 0x91,
	0xc9, 0xd8, 0x42, 0xcf, 0xc8, 0xb4, 0x93, 0x3e, 0xfd, 0xa1, 0x0b, 0x99, 0xf1, 0x18, 0x8a, 0x4c,
	0x26, 0x26, 0xfa, 0x86, 0x0c, 0x56, 0x36, 0xb7, 0x2d, 0xb0, 0x81, 0xb3, 0x0f, 0x79, 0x27, 0x45,
	0x26, 0xfd, 0x06, 0xfd, 0x40, 0x88, 0xac, 0x8a, 0xd2, 0xdb, 0x86, 0xce, 0x36, 0xe1, 0x7b, 0x24,
	0x32, 0x19, 0x19, 0xe8, 0x17, 0x32, 0x5f, 0x55, 0xb7, 0x5a, 0xad, 0x2f, 0x1b, 0x53, 0x1b, 0xc8,
	0x37, 0x6c, 0xe4, 0x42, 0x16, 0x3c, 0xc5, 0x22, 0x93, 0x3d, 0x23, 0x7d, 0x4d, 0x0e, 0xcf, 0xb1,
	0x85, 0x6c, 0xec, 0x22, 0x06, 0xdc, 0x29, 0x91, 0xc9, 0x0e, 0x63, 0x6a, 0xb7, 0xf8, 0x55, 0xd9,
	0xf2, 0xb2, 0x31, 0xe6, 0x86, 0x11, 0x9f, 0x3a, 0xc5, 0x98, 0x3a, 0x25, 0x58, 0xce, 0x2e, 0x99,
	0xca, 0xd7, 0xaa, 0x61, 0x13, 0x5f, 0xce, 0x88, 0x61, 0x39, 0x23, 0x89, 0x9d, 0x72, 0xf2, 0x6a,
	0x0b, 0x6c, 0xea, 0x3b, 0x15, 0x00, 0x76, 0x2a, 0xac, 0xe9, 0x67, 0x32, 0xf3, 0x6b, 0x91, 0x43,
	0xa9, 0x80, 0xcd, 0x9c, 0x7b, 0xce, 0x13, 0x2a, 0x32, 0x99, 0xda, 0xe8, 0x37, 0xb2, 0x4c, 0x80,
	0x54, 0xf7, 0x6c, 0xee, 0x42, 0x8f, 0x78, 0x7f, 0x43, 0x64, 0xf2, 0x3f, 0x33, 0xbe, 0xe9, 0xa7,
	0x6a, 0xaa, 0x9b, 0xdd, 0xd5, 0x16, 0x63, 0x17, 0xfe, 0x4d, 0x11, 0xc3, 0x37, 0x45, 0x12, 0x3f,
	0x91, 0xbd, 0x84, 0x9a, 0x2d, 0xfd, 0x27, 0x12, 0x43, 0xfc, 0x44, 0x62, 0x8d, 0x55, 0xef, 0xb4,
	0xbb, 0x00, 0x9e, 0x74, 0xe4, 0xab, 0x9e, 0x62, 0xac, 0x7a, 0x4a, 0xe8, 0x57, 0xb2, 0x48, 0x08,
	0xd4, 0x8c, 0xba, 0xd8, 0x25, 0xef, 0x71, 0x91, 0xc9, 0xbe, 0x15, 0x0f, 0xfe, 0xee, 0x46, 0x54,
	0xad, 0xa5, 0x82, 0x76, 0x63, 0xd9, 0xb1, 0x3f, 0x38, 0xc5, 0x78, 0x70, 0x4a, 0xdc, 0xf4, 0xf8,
	0x69, 0xc6, 0x0b, 0x3f, 0x0d, 0xd3, 0xb3, 0x67, 0x6e, 0x7a, 0xf6, 0xd2, 0x4d, 0xcf, 0x83, 0x84,
	0x9a, 0x3d, 0x0b, 0xd3, 0x13, 0x41, 0x37, 0x3d, 0x91, 0xc6, 0xd6, 0x5f, 0x54, 0x50, 0xa8, 0xcd,
	0x26, 0xd7, 0xca, 0xb4, 0xc0, 0x9e, 0xfb, 0xd6, 0x27, 0x14, 0x5b, 0x9f, 0x00, 0x6c, 0x7d, 0x02,
	0xf0, 0x8e, 0x2f, 0x7c, 0xeb, 0xfb, 0x1b, 0xd8, 0xfa, 0x3e, 0x3b, 0x1f, 0x93, 0x61, 0x61, 0xb4,
	0x55, 0xda, 0x5e, 0x0f, 0xdc, 0xdf, 0xea, 0xec, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x39, 0x45,
	0x81, 0x97, 0x3e, 0x05, 0x00, 0x00,
}
